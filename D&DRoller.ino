#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#define ROLL_THRESHOLD  6000 // Accelerometer Threshold shake

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.
const int switchPin = 5;     // the number of the pushbutton pin
int buttonState; 
int val;
int val2;
int Mode = 0;


const int SHORT_PRESS_TIME = 1000; // 1000 milliseconds
const int LONG_PRESS_TIME  = 1000; // 1000 milliseconds
int lastState = LOW;  // the previous state from the input pin
unsigned long pressedTime  = 0;
unsigned long releasedTime = 0;
bool isPressing = false;
bool isLongDetected = false;


float X, Y, Z, totalAccel;



const unsigned char DnD [] PROGMEM = {

// 'dndlnd2', 128x64px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xc0, 0x3c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x1f, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x1f, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
0xc0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x1f, 0xf0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc4, 0x1f, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc4, 0x3f, 0xf0, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 
0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcc, 0x3f, 0xf0, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 
0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xce, 0x36, 0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 
0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xee, 0x26, 0x60, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xeb, 0x22, 0x60, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xe9, 0xa2, 0x30, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xf8, 0xe1, 0x18, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x70, 0x9c, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 
0xff, 0x80, 0x03, 0xfe, 0x00, 0x00, 0xc0, 0x10, 0x4e, 0x7f, 0xfc, 0x47, 0xff, 0xf0, 0x00, 0x07, 
0xff, 0x80, 0x03, 0xff, 0x80, 0x00, 0xe0, 0x08, 0x27, 0xff, 0xfd, 0xbf, 0x9f, 0xfc, 0x00, 0x07, 
0xff, 0x80, 0x03, 0xff, 0xc0, 0x00, 0x70, 0x00, 0x13, 0xff, 0xff, 0xef, 0xff, 0xfe, 0x00, 0x03, 
0xff, 0x80, 0x03, 0xff, 0xe0, 0x00, 0x70, 0x02, 0x09, 0xff, 0xff, 0x9f, 0xff, 0xff, 0x00, 0x03, 
0xff, 0x80, 0x03, 0xff, 0xf0, 0x00, 0xe0, 0x00, 0x04, 0xff, 0xfb, 0x10, 0x0f, 0xff, 0x80, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf0, 0x03, 0xc0, 0x00, 0x00, 0x7f, 0xf6, 0x00, 0x03, 0xff, 0x80, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf0, 0x07, 0x00, 0x18, 0x10, 0x7f, 0xe0, 0x00, 0x00, 0xff, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x0e, 0x00, 0xe0, 0x08, 0x7f, 0xc1, 0x80, 0x00, 0x7f, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x1f, 0xc1, 0xf0, 0x04, 0x3f, 0xc6, 0x00, 0x1f, 0xff, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x3f, 0xe0, 0x70, 0x00, 0x3f, 0x98, 0x7e, 0xff, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x73, 0xe1, 0xc0, 0xf8, 0x17, 0x31, 0xe7, 0xdf, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x07, 0x67, 0xc0, 0x7c, 0x07, 0x43, 0x81, 0x9f, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x06, 0x6f, 0xb8, 0x58, 0x07, 0x83, 0x00, 0x1f, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x0c, 0x59, 0xfc, 0xdf, 0x0f, 0x06, 0x00, 0x1f, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x18, 0x71, 0xce, 0xe1, 0x8e, 0x0c, 0x00, 0x1f, 0xff, 0xc0, 0x00, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x18, 0x61, 0x1e, 0x30, 0xdc, 0x0c, 0x00, 0x1f, 0xff, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x10, 0x40, 0x1e, 0x78, 0x7c, 0x1c, 0x00, 0x1f, 0xff, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf8, 0x30, 0x80, 0x3e, 0x3c, 0x78, 0x1c, 0x00, 0x1f, 0xff, 0xc0, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf0, 0x30, 0x00, 0x7c, 0x1c, 0x3e, 0x3c, 0x00, 0x1f, 0xff, 0x80, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xf0, 0x28, 0x00, 0x7e, 0x3c, 0x03, 0x3d, 0x00, 0x1f, 0xff, 0x80, 0x01, 
0xff, 0x80, 0x03, 0xff, 0xe0, 0x38, 0x00, 0x7e, 0xfc, 0x01, 0xfc, 0xc0, 0x1f, 0xff, 0x00, 0x03, 
0xff, 0x80, 0x03, 0xff, 0xc0, 0x38, 0x00, 0xff, 0xfe, 0x00, 0xfc, 0xe0, 0x1f, 0xfe, 0x00, 0x03, 
0xff, 0x80, 0x03, 0xff, 0x80, 0x70, 0x00, 0xff, 0xfe, 0x00, 0x7c, 0xff, 0xff, 0xfc, 0x00, 0x07, 
0xff, 0x80, 0x03, 0xfe, 0x00, 0x70, 0x00, 0xff, 0xff, 0x00, 0x3c, 0x5e, 0x7f, 0xf8, 0x00, 0x07, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x50, 0x00, 0xff, 0xff, 0x80, 0x1c, 0xcf, 0x1c, 0x00, 0x00, 0x0f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0xff, 0xff, 0xe0, 0x07, 0xcd, 0x86, 0x00, 0x00, 0x0f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0xff, 0xff, 0x70, 0x03, 0x0c, 0x82, 0x00, 0x00, 0x1f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0xff, 0xfe, 0x38, 0x00, 0x0c, 0x83, 0x00, 0x00, 0x3f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x7f, 0xfc, 0x1c, 0x00, 0x0d, 0x81, 0x00, 0x00, 0x3f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x10, 0x00, 0x7f, 0xf8, 0x06, 0x00, 0x0f, 0x81, 0x80, 0x00, 0x7f, 
0xff, 0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x3f, 0xf0, 0x06, 0x00, 0x0f, 0x01, 0x80, 0x01, 0xff, 
0xff, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x1f, 0xe0, 0x07, 0x00, 0x18, 0x01, 0x80, 0x03, 0xff, 
0xfe, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x03, 0x00, 0x0f, 0x00, 0x00, 0x01, 0x80, 0x07, 0xff, 
0xfc, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x01, 0x00, 0x1f, 0xff, 
0xf0, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x03, 0x00, 0x7f, 0xff, 
0xc0, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x02, 0x07, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc0, 0x00, 0x00, 0x7f, 0x10, 0x00, 0x07, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc0, 0x00, 0x00, 0xff, 0x10, 0x00, 0x1f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0x18, 0x00, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0x98, 0x01, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xdc, 0x00, 0x1f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xee, 0x00, 0x3f, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


void setup() {
    Wire.begin();
    Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
    Wire.write(0x6B); // PWR_MGMT_1 register
    Wire.write(0); // set to zero (wakes up the MPU-6050)
    Wire.endTransmission(true);
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    display.clearDisplay();

    pinMode(switchPin, INPUT_PULLUP);
    
    
        
    // Display bitmap
    display.drawBitmap(0, 0,  DnD, 128, 64, WHITE);
    display.display();
    delay(2000);
    display.clearDisplay();
    
    
    display.setTextColor(WHITE);
    display.setTextSize(2);
    display.setCursor(6,30);
    display.println("DiceRoller");
    display.display();
    display.clearDisplay();
    delay(2000);
    
    randomSeed(analogRead(0));
    
    buttonState = digitalRead(switchPin);

}
void loop() {

  
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers

  
  X = 0;
  Y = 0;
  Z = 0;
  for (int i=0; i<10; i++) {
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
    X += Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
    Y += Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
    Z += Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
      delay(1);
  }
  X /= 10;
  Y /= 10;
  Z /= 10;

  totalAccel = sqrt(X*X + Y*Y + Z*Z);
  

  val = digitalRead(switchPin);
  delay(10);
  val2 = digitalRead(switchPin);
  if (val == val2) {
    if (val != buttonState) {
      if (val == LOW) {
        if (Mode == 0) {
          Mode = 1;
        } else {
          if (Mode == 1) {
            Mode = 2;
          } else {
            if (Mode == 2) {
              Mode = 3;
            } else {
              if (Mode == 3) {
                Mode = 4;
          } else {
              if (Mode == 4) {
                Mode = 5;
              } else  {
              if (Mode == 5) {
                Mode = 0;
              }  
              }
            }
          }
        }
      }
    }
   }
    buttonState = val;
  }

  if (Mode == 0)  { 

        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D4");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        
        
        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(50,15);
        display.println(random(1,5)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

          
   }
  
    
 
  if (Mode == 1) {
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D6");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        

        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(50,15);
        display.println(random(1,7)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

      
  }
  if (Mode == 2) {
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D8");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        

        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(50,15);
        display.println(random(1,9)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

      
  }
  if (Mode == 3) {
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D10");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        
        

        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(50,15);
        display.println(random(1,11)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

      
  }
    if (Mode == 4) {
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D12");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        

        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(50,15);
        display.println(random(1,13)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

      
  }
     if (Mode == 5 ) {
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(40,15);
        display.println("D20");
        display.display();
        display.clearDisplay(); 
        delay(100);

      if (totalAccel > ROLL_THRESHOLD) {
        

        delay(2000);
        display.setTextColor(WHITE);
        display.setTextSize(4);
        display.setCursor(48,15);
        display.println(random(1,21)); 
                   
        display.display();
        display.clearDisplay();  
        delay(2000);
      }

      
  }
  

  }
